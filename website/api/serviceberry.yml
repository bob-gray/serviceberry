name: Serviceberry
type: object
description: |
  When you require "serviceberry" this is the object that you receive. The most
  important property is the factory function [createTrunk()](#createtrunk). It
  is the entry point of the framework.

  A service is created by creating a [trunk](trunk) then [branches](branch)
  and [leaves](leaf) are added using [.at()](trunk#atpath-handlers-) and
  [.on()](trunk#onmethod-handlers-). Each [branch](branch)
  can have it's own [branches](branch) and [leaves](leaf) allowing
  [plugins](plugins) and error handlers to be added at any levels with methods
  [.use()](trunk#usehandlers) and [.cope()](trunk#copehandlers) on the
  [trunk](trunk) or any [branch](branch) or [leaf](leaf).
properties:
- name: createTrunk
  type: function
  description: |
    Creating a [trunk](trunk) using this factory function is the first thing
    you'll do when creating a service. This is the entry point of the framework.
  sample: |
    const service = serviceberry.createTrunk({
      port: 3000,
      basePath: "api",
      callback: () => console.log("Sevice started!")
    });
  arguments:
  - name: options
    type: object
    required: false
    properties:
    - name: autoStart
      type: boolean
      description: |
        If false, the service won't begin handling requests until [.start()](#startcallback)
        is called.
      default: true
    - name: backlog
      type: number
      required: false
      description: |
        Maximum number of queued pending connections.
        See [nodejs.org](https://nodejs.org/dist/latest/docs/api/net.html#net_server_listen).
      default: 511
    - name: callback
      type: function
      description: Listener for server's listening event.
      required: false
    - name: deserializers
      type: object
      description: |
        Property names must be content types such as "application/json" and
        values must be [deserializer handlers](plugins#serializers-and-deserializers).

        When requests need deserialized, a deserializer matching the request's
        content type will be used.
      required: false
    - name: host
      type: string
      required: false
      description: |
        The host to listen on.
        See [nodejs.org](https://nodejs.org/dist/latest/docs/api/net.html#net_server_listen).
      default: all hosts
    - name: path
      type: string
      description: |
        Base path of the [trunk](trunk). All request handled by the service
        must begin with this path.
      default: "empty string"
    - name: port
      type: number
      description: |
        The port to listen on.
        See [nodejs.org](https://nodejs.org/dist/latest/docs/api/net.html#net_server_listen).
      default: 3000
    - name: serializers
      type: object
      description: |
        Property names must be content types such as "application/json"
        and values must be [serializer handlers](plugins#serializers-and-deserializers).

        When responses need serialized, a serializer matching the response's
        content type will be used.
      required: false
    - name: timeout
      type: number
      description: Number of milliseconds to wait before aborting requests.
      default: 10000
      required: false

- name: HttpError
  type: class
  description: |
    A class for creating HTTP specific error objects. It isn't strictly necessary
    for creating Serviceberry services. It is here for your convenience.

    The [HttpError](httperror) constructor has the same arguments signature as
    [request.fail()](request#failerror-status-headers) and is instanced
    internally by Serviceberry when a request fails. [HttpError](httperror)
    instances are the error objects available at request.error inside of error
    handlers.

- name: statusCodes
  type: object
  description: |
    This is a helper for avoiding magic numbers and helping your services and [plugins](plugins)
    be more legible. It isn't strictly necessary for creating Serviceberry services.
    It is here for your convenience.

    It includes all the statuses in Node.js's [http.STATUS_CODES](https://nodejs.org/dist/latest/docs/api/http.html#http_http_status_codes).
    It has status codes as properties at constant case status names such as statusCodes.OK
    and status codes as properties at status text names such as statusCode["Not Found"].
